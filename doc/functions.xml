<!--===========================================================================
||||  Functions                                                            ||||
===============================================================================
||||  This file is part of the ProgressBar package.
||||
||||  This file's authors include Friedrich Rober.
||||
||||  Please refer to the COPYRIGHT file for details.
||||
||||  SPDX-License-Identifier: GPL-2.0-or-later
===============================================================================
============================================================================-->


<Chapter Label="Functions">
<Heading>Functions</Heading>

Here we include a list of all functions that are provided to the <E>user</E>. <P/>

See Chapter <Ref Chap="Intro"/> for extensive examples on how to use these functions. <P/>


<!--===========================================================================
||||  Terminology                                                          ||||
============================================================================-->

<Section Label="Terminology">
<Heading>Terminology</Heading>

Abstractly speaking, a <E>process</E> is a series of actions or steps taken in order to achieve a particular end. <P/>

We refer to steps by their position in the series.
For technical reasons, we add an artificial step <M>0</M> at the beginning of the series.
Step <M>0</M> is completed when the process starts. <P/>

A step might be broken down into smaller steps, and thus we can think of a step as a (sub-)process.
In this case, we call the larger process the <E>parent (process)</E> and the nested (sub-)process the <E>child (process)</E>.
Therefore a process naturally induces a tree graph via the parent-child relations which we call a <E>process tree</E>. <P/>

The <E>progress</E> of a process is the measure how close we are to the end.
The process has <E>terminated</E> when the end is reached.<P/>

Displaying the progress of a process means that we only show information about the current state of the process,
whilst removing all visual references to the past states. <P/>

A change of one step to the next is called the <E>progression</E> of a process.
We update the display on the terminal screen for each progression automatically. <P/>

This package displays the progress of exactly one main process, which we call the <E>root (process)</E>. <P/>

</Section>


<!--===========================================================================
||||  Process Functions                                                    ||||
============================================================================-->


<Section Label="Process Functions">
<Heading>Process Functions</Heading>

Here we include a list of all functions related to creating and modifying a process. <P/>

<#Include Label="ProcessIterator">

<#Include Label="SetProcess">

<#Include Label="RefreshProcess">

<#Include Label="UpdateProcess">

<#Include Label="StartProcess">

<#Include Label="StopProcess">

<#Include Label="TerminateProcess">

<#Include Label="ResetProcess">

</Section>


<!--===========================================================================
||||  Display                                                              ||||
============================================================================-->


<Section Label="Display Functions">
<Heading>Display</Heading>

Here we include a list of all functions related to the display.<P/>

<#Include Label="SetLayout">

<#Include Label="LayoutOptions">

<#Include Label="SetLayoutOptions">

<#Include Label="ResetLayoutOptions">


<!--===========================================================================
||||  Color and Style                                                       ||||
============================================================================-->


<Subsection Label="Color and Style">
<Heading>Color And Style</Heading>

Some layout options allow to set a color or a style. The available colors and styles are listed below.

<List>
<Mark><C>Color</C></Mark>
<Item>
<K>"default"</K> is the default printing color of your terminal. This color might dynamically change depending on your local settings like nightmode. <P/>
<K>other: </K>
<!-- https://github.com/mbadolato/iTerm2-Color-Schemes/blob/master/windowsterminal/Ubuntu.json -->
<Alt Only="HTML"><![CDATA[
<span style="color:#2e3436;"> black </span>,
<span style="color:#cc0000;"> red </span>,
<span style="color:#4e9a06;"> green </span>,
<span style="color:#c4a000;"> yellow </span>,
<span style="color:#3465a4;"> blue </span>,
<span style="color:#75507b;"> magenta </span>,
<span style="color:#06989a;"> cyan </span>,
<span style="color:#d3d7cf;"> white </span>.
]]></Alt><Alt Only="LaTeX"><![CDATA[
\textcolor{myblack}{black},
\textcolor{myred}{red},
\textcolor{mygreen}{green},
\textcolor{myyellow}{yellow},
\textcolor{myblue}{blue},
\textcolor{mymagenta}{magenta},
\textcolor{mycyan}{cyan},
\textcolor{mywhite}{white}
]]>
</Alt><Alt Only="Text">
black, red, green, yellow, blue, magenta, cyan, white
</Alt>
</Item>

<Mark><C>Style</C></Mark>
<Item>
<K>"default"</K> is the default printing style of your terminal, usually roman. <P/>
<K>other: </K>
<Alt Only="HTML"><![CDATA[
<b>bold</b> ,
<span style="color:lightgray;">dim</span> ,
<i>italic</i> ,
<u>underline</u> ,
<span id="blink">blinking</span>.
<script type="text/javascript">
    var blink = document.getElementById('blink');
    setInterval(function() {
        blink.style.opacity = (blink.style.opacity == 0.2 ? 1 : 0.2);
    }, 500);
</script>
]]></Alt><Alt Only="LaTeX"><![CDATA[
\textbf{bold},
\textit{italic},
\underline{underline},
blinking
]]>
</Alt><Alt Only="Text">
bold, dim, italic, underline, blinking
</Alt>
</Item>

</List>

</Subsection>

</Section>


<!--===========================================================================
============================================================================-->


</Chapter>
