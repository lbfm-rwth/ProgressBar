<!--===========================================================================
||||  Introduction                                                         ||||
===============================================================================
||||  This file is part of the ProgressBar package.
||||
||||  This file's authors include Friedrich Rober.
||||
||||  Please refer to the COPYRIGHT file for details.
||||
||||  SPDX-License-Identifier: GPL-2.0-or-later
===============================================================================
============================================================================-->


<Chapter Label="Intro">
<Heading>Introduction</Heading>

This chapter serves as an introduction to the package &ProgressBar; and includes many examples. <P/>

The main purpose of this package is to display the progression of a process in the terminal
via a progress bar that refreshes in the screen after each step of the process. <P/>

Instead of writing new lines in the terminal screen after each step of a process,
the terminal screen gets refreshed in space.
This method of displaying information avoids spamming in the terminal,
and provides an intuitive and clean visualization of the progress.


<!--===========================================================================
||||  Example : Loop                                                       ||||
============================================================================-->


<Section Label="Example Loop">
<Heading>Example: Loop</Heading>

In the first example we show the simplest use case of the package,
namely displaying the progression of a loop over a fixed list. <P/>

For this we simply wrap the list into the function <C>ProcessIterator</C>.

<Log><![CDATA[
gap> LoadPackage("ProgressBar");;
gap> doLoop := function(n, nSleep)
>      local i;
>      for i in ProcessIterator([1 .. n]) do
>        MicroSleep(nSleep);
>      od;
>    end;;
gap> doLoop(7, 10^6/4);;
]]></Log>

In the above example we might encounter the following outputs during the execution of the iteration.
All these outputs are visible in the same lines of the terminal for roughly 1/4 of a second.
<Log><![CDATA[
| Total Time ~ 00:00:00
[========================================-------------------------------] | 4/7

| Total Time ~ 00:00:01
[=======================================================================] | 7/7
]]></Log>

The package can also handle very fast updates,
but keep in mind that it adds some overhead to the computation.
In this example, the overhead acumulates over the <M>5000</M> iterations to <M>2</M> extra seconds
for a computation that would otherwise only take about <M>5</M> seconds.

<Log><![CDATA[
gap> LoadPackage("ProgressBar");;
gap> doLoop := function(n, nSleep)
>      local i;
>      for i in ProcessIterator([1 .. n]) do
>        MicroSleep(nSleep);
>      od;
>    end;;
gap> doLoop(5000, 1000);
]]></Log>

</Section>


<!--===========================================================================
||||  Example : Indefinite Loop                                            ||||
============================================================================-->


<Section Label="Example Indefinite Loop">
<Heading>Example: Indefinite Loop</Heading>

We can also display the progression of an indefinite loop. <P/>

For this we simply wrap an iterator into the function <C>ProcessIterator</C>.

<Log><![CDATA[
gap> LoadPackage("ProgressBar");;
gap> doLoop := function(n, nSleep)
>      local i;
>      for i in ProcessIterator(IteratorOfCombinations([1 .. n])) do
>        MicroSleep(nSleep);
>      od;
>    end;;
gap> doLoop(8, 10^4);;
]]></Log>

In the above example we might encounter the following outputs during the execution of the iteration.
<Log><![CDATA[
| Total Time ~ 00:00:01
[--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--=] | 123/oo

| Total Time ~ 00:00:02
[==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==-] | 193/oo

| Total Time ~ 00:00:03
[===================================================================] | 256/oo
]]></Log>

Sometimes we can actually compute the number of steps needed
for the process to terminate beforehand.
This will change the display and provide more detailed information
about the progress, see <Ref Sect="Example Loop"/>.

<Log><![CDATA[
gap> LoadPackage("ProgressBar");;
gap> doLoop := function(n, nSleep)
>      local iter, i;
>      iter := ProcessIterator(rec(
>        iter := IteratorOfCombinations([1 .. n]),
>        totalSteps := 2^n
>      ));
>      for i in iter do
>        MicroSleep(nSleep);
>      od;
>    end;;
gap> doLoop(8, 10^4);;
]]></Log>

If we set the <C>totalSteps</C> wrong, the display will change to an indefinite loop
once we exceed them in the iteration.
<Log><![CDATA[
gap> LoadPackage("ProgressBar");;
gap> doLoop := function(n, nSleep)
>      local iter, i;
>      iter := ProcessIterator(rec(
>        iter := IteratorOfCombinations([1 .. n]),
>        totalSteps := 2^(n-1)
>      ));
>      for i in iter do
>        MicroSleep(nSleep);
>      od;
>    end;;
gap> doLoop(8, 10^4);;
]]></Log>

</Section>


<!--===========================================================================
||||  Example : Nested Loop                                                ||||
============================================================================-->


<Section Label="Example Nested Loop">
<Heading>Example: Nested Loop</Heading>

The package also supports displaying nested loops.
For this we need to specify the parent-child relationships of the individual processes.
We also adjust the display to show the total execution time of the root process.
<Log><![CDATA[
gap> LoadPackage("ProgressBar");;
gap> doNestedLoop := function(n, nSleep, m, mSleep)
>      local i, j;
>      for i in ProcessIterator([1 .. n], "1") do
>        MicroSleep(nSleep);
>        for j in ProcessIterator([1 .. m], "2", "1") do
>          MicroSleep(mSleep);
>        od;
>      od;
>    end;;
gap> doNestedLoop(3, 10^6/2, 50, 10^4);;

]]></Log>

An example output might look like this
<Log><![CDATA[
| Total Time ~ 00:00:01
[==============================================-----------------------] |  2/ 3
   [------------------------------------------------------------------] |  0/50

| Total Time ~ 00:00:02
[==============================================-----------------------] |  2/ 3
   [===============================================-------------------] | 36/50

| Total Time ~ 00:00:02
[=====================================================================] |  3/ 3
   [==================================================================] | 50/50
]]></Log>

</Section>


<!--===========================================================================
||||  Example : Tree                                                       ||||
============================================================================-->


<Section Label="Example Tree">
<Heading>Example: Tree</Heading>

We can also display much more intertwined processes than nested loops.
This package can handle any process tree. <P/>

<Log><![CDATA[
gap> LoadPackage("ProgressBar");;
gap> doTree := function(n, nSleep, l, lSleep, m, mSleep, r, rSleep)
>      local i, j, k;
>      for i in ProcessIterator([1 .. n], "Root", fail) do
>        MicroSleep(nSleep);
>        for j in ProcessIterator([1 .. l], "Left", "Root") do
>          MicroSleep(lSleep);
>          for k in ProcessIterator([1 .. m], "Inner", "Left") do
>            MicroSleep(mSleep);
>          od;
>        od;
>        for j in ProcessIterator([1 .. r], "Right", "Root") do
>          MicroSleep(rSleep);
>        od;
>      od;
>    end;;
gap> SetLayoutOptions(rec(
>      printID := true,
>    ));;
gap> doTree(3, 10^6/10, 5, 10^6/2, 4, 10^6/10, 12, 10^6/10);;
gap> ResetLayoutOptions();;
]]></Log>

Example output during the execution of the function:
<Log><![CDATA[
| Total Time ~ 00:00:15
[==============================================-----------------------] |  2/ 3
   [=======================================---------------------------] |  3/ 5
   |  [===============================--------------------------------] |  2/ 4
   [------------------------------------------------------------------] |  0/12
]]></Log>

In the above example we create the processes on the fly,
so for example the <Q>Right</Q> process appears in the terminal only after we create this process for the first time.
When this happens, the layout of the display changes slightly, because the total number of iterations for <Q>Right</Q> has 2 digits,
whereas for each of the ones before that it had 1 digit.

Example output before process <Q>Right</Q> gets created for the first time:
<Log><![CDATA[
| Total Time ~ 00:00:03
[-----------------------------------------------------------------------] | 0/3
   [======================================================--------------] | 4/5
      [-----------------------------------------------------------------] | 0/4
]]></Log>

Example output after process <Q>Right</Q> gets created for the first time:
<Log><![CDATA[
| Total Time ~ 00:00:11
[=======================----------------------------------------------] |  1/ 3
   [==================================================================] |  5/ 5
   |  [===============================================================] |  4/ 4
   [======================================----------------------------] |  7/12
]]></Log>

If we want to see all processes from the beginning, we need to set the processes before the most outer loop starts.
<Log><![CDATA[
gap> LoadPackage("ProgressBar");;
gap> doTree := function(n, nSleep, l, lSleep, m, mSleep, r, rSleep)
>      local iter, i, j, k;
>      iter := ProcessIterator([1 .. n], "Root", fail);
>      SetProcess(l, "Left", "Root");
>      SetProcess(m, "Inner", "Left");
>      SetProcess(r, "Right", "Root");
>      for i in iter do
>        MicroSleep(nSleep);
>        for j in ProcessIterator([1 .. l], "Left", "Root") do
>          MicroSleep(lSleep);
>          for k in ProcessIterator([1 .. m], "Inner", "Left") do
>            MicroSleep(mSleep);
>          od;
>        od;
>        for j in ProcessIterator([1 .. r], "Right", "Root") do
>          MicroSleep(rSleep);
>        od;
>      od;
>    end;;
gap> SetLayoutOptions(rec(
>      printID := true,
>    ));;
gap> doTree(3, 10^6/10, 5, 10^6/2, 4, 10^6/10, 12, 10^6/10);;
gap> ResetLayoutOptions();;
]]></Log>
</Section>

Then the output looks like this from the start:
<Log><![CDATA[
| Total Time ~ 00:00:03
[---------------------------------------------------------------------] |  0/ 3
   [=======================================---------------------------] |  3/ 5
   |  [---------------------------------------------------------------] |  0/ 4
   [------------------------------------------------------------------] |  0/12
]]></Log>


<!--===========================================================================
||||  Example : Table                                                      ||||
============================================================================-->


<Section Label="Example Table">
<Heading>Example: Table</Heading>

If for example we want to compare the performance of different processes,
it might be more intuitive to switch to the table layout. <P/>

For this we need to define a dummy process, that we terminate manually in the end.
All processes we want to track have to be defined as children of this dummy. <P/>

TODO

</Section>


<!--===========================================================================
||||  Example : Stopping                                                   ||||
============================================================================-->


<Section Label="Example Stopping">
<Heading>Example: Stopping</Heading>

If there is code that we do not want to track in our process,
we can use <C>StopProcess</C> and <C>StartProcess</C>. <P/>

<Log><![CDATA[
gap> LoadPackage("ProgressBar");;
gap> doLoopWithStop := function(n, nSleep, mSleep)
>      local i;
>      for i in ProcessIterator([1 .. n], "proc") do
>        MicroSleep(nSleep);
>        StopProcess("proc");
>        MicroSleep(mSleep);
>        StartProcess("proc");
>      od;
>    end;;
gap> doLoopWithStop(50, 10^6/10, 10^6/10);;
]]></Log>

In the above example the code runs for roughly 10 seconds,
but the tracked total time that contributes to the process shows roughly 5 seconds.

</Section>


<!--===========================================================================
============================================================================-->


</Chapter>
