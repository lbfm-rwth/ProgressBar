<!--===========================================================================
||||  Developer                                                            ||||
===============================================================================
||||  This file is part of the ProgressBar package.
||||
||||  This file's authors include Friedrich Rober.
||||
||||  Please refer to the COPYRIGHT file for details.
||||
||||  SPDX-License-Identifier: GPL-2.0-or-later
===============================================================================
============================================================================-->


<Chapter Label="Progress Printer">
<Heading>Progress Printer</Heading>

Here we include a guide how to modify the progress printing.
This chapter is intended for <E>advanced users</E> or <E>developers</E> of the package.<P/>

The <E>progress printer</E> is a framework
built from a collection of <E>printer moduls</E> that are solely responsible
to display a specific information about the current state of a process
e.g. the number of completed iterations or the total runtime.
Moreover it specifies an abstract <E>layout</E>
e.g. the positional relations between the individual moduls. <P/>

In the following we explain the terminology of the framework and the technical implementation.
See also Section <Ref Sect="Terminology"/> for some basic terminology. <P/>

In the end we include an example how to adjust the progress printer. <P/>


<!--===========================================================================
||||  Terminal                                                             ||||
============================================================================-->


<Section Label="Terminal">
<Heading>Terminal</Heading>

We can think of the <E>terminal</E> as a finite grid of cells
each indexed by an <C>(x, y)</C>-coordinate and assigned a single character.
The <E>cursor</E> is an object that occupies the space of exactly one cell.
We are able to perform the following actions:
<List>
<Item>
move the cursor to an adjacent cell
</Item>
<Item>
overwrite the character of the cell occupied by the cursor
</Item>
</List>

The coordinate <C>(1, 1)</C> denotes the cell in the terminal
where the usual <C>Print</C> command would start to write a character,
i.e. the initial position of the cursor after hitting the <Q>enter key</Q> on the gap prompt.
We think of this cell as the top left corner of the space that we reserve to print the progress.
Increasing the <C>x</C>-coordinate can be understood as movement to the right,
whereas increasing the <C>y</C>-coordinate as movement to the bottom.

</Section>


<!--===========================================================================
||||  Block                                                                ||||
============================================================================-->


<Section Label="Block">
<Heading>Block</Heading>

A <E>block</E> is a virtually allocated space in the terminal (see Section <Ref Sect="Terminal"/>)
in form of a rectangle, a record <C>rec(x, y, w, h)</C>,
where the top left corner of the interior is the cell at the coordinate <C>(x, y)</C>,
the width is given by <C>w</C> and the height by <C>h</C>,
i.e. the bottom right corner of the interior is the cell at the coordinate <C>(x + w - 1, y + h - 1)</C>. <P/>

For example we would see something akin to the following
if we fill the inside of the block <C>(x := 3, y := 2, w := 5, h := 2)</C>
with the symbols <Q><K>O</K></Q> and use a simple dot <Q><K>.</K></Q> for the outside:<P/>

<Log><![CDATA[
..........
..OOOOO...
..OOOOO...
..........
..........
]]></Log>

</Section>


<!--===========================================================================
||||  Pattern                                                              ||||
============================================================================-->


<Section Label="Pattern">
<Heading>Pattern</Heading>

The main purpose of a <E>pattern</E>
is to encode a coherent display of the progress.
We use patterns to create blocks in a structured and uniform manner
of which a few special ones are defining bounds for printer modules.
The progress printer has a <E>pattern tree</E> whose nodes are patterns,
records that contain the following entries: <P/>

<List>
<Mark>id</Mark>
<Item>
Unique identifier string of the pattern.
</Item>

<Mark>parent</Mark>
<Item>
A pattern or <C>fail</C>.
</Item>

<Mark>children</Mark>
<Item>
List of patterns.
</Item>

<Mark>isActive</Mark>
<Item>
A function that takes as input a process and returns whether the branch starting in this pattern is active.
</Item>

<Mark>alignment</Mark>
<Item>
<K>"horizontal"</K> all blocks created from children of this pattern are aligned horizontally,
i.e. they have equal <C>y</C>-coordinates and heights. <P/>
<K>"vertical"</K> all blocks created from children of this pattern are aligned vertically,
i.e. they have equal <C>x</C>-coordinates and widths.
</Item>

<Mark>sync</Mark>
<Item>
<K>["dim", ...]</K> all blocks created from this pattern have equal values for the dimension <A>dim</A>, etc.
</Item>

</List>

If a pattern is a leaf node, it must additionally contain the following entries: <P/>

<List>

<Mark>printer</Mark>
<Item>
A printer module.
</Item>

<Mark>printer_options</Mark>
<Item>
An options record for the printer.
</Item>

</List>

<Subsection>
<Heading>Creating Blocks</Heading>

For each process we create blocks from the pattern tree using a recursive strategy:
If the pattern is active for the given process (<C>pattern.isActive(process) = True</C>),
we create a block with the given id (stored in <C>process.blocks.id</C>)
and apply the same strategy for all children of the pattern. <P/>

A block created from the root of the pattern tree is called a <E>process block</E>.
The width of a process block spans the whole terminal screen.
Furthermore we require that the process blocks are stacked from top to bottom
following the natural ordering of the process tree given by DFS (depth-first search). <P/>

A block created from an inner node of the pattern tree is called a <E>composition block</E>.
The interior of such a block must be the disjoint union of the interior of its children,
and either the children are aligned horizontally within the block, or vertically.
Visually speaking, we split a composition block into smaller blocks by either using only vertical or horizontal cuts. <P/>

A block created from a leaf node of the pattern tree is called a <E>printer block</E>.
This block corresponds to a printer module that is capable of displaying a specific information about the current state of a process inside the block bounds. (See <Ref Sect="Printer Module"/>) <P/>

</Subsection>

</Section>


<!--===========================================================================
||||  Layout                                                               ||||
============================================================================-->

<Section Label="Layout">
<Heading>Layout</Heading>

The <E>layout</E> is a record containing the following entries:

<List>

<Mark>Setup</Mark>
<Item>
A function that setups
the following entries
of the progress printer
using the current options
in <C>ProgressPrinter.Options</C>:
<List>
<Item>
<C>ProgressPrinter.Pattern</C>
</Item>
<Item>
<C>ProgressPrinter.InitialConfiguration</C>
</Item>
</List>
</Item>

<Mark>DefaultOptions</Mark>
<Item>
The default options record for <C>Setup</C>.
</Item>

</List>

</Section>


<!--===========================================================================
||||  Printer Module                                                       ||||
============================================================================-->


<Section Label="Printer Module">
<Heading>Printer Module</Heading>

A <E>printer module</E> is responsible for displaying a specific information about the current state of a process
e.g. the number of completed iterations or the total runtime.
Technically, it is a record that must contain the following functions as entries
where the argument <A>options</A> must be valid printer options for this module.
For a description of all available printer modules, see Chapter <Ref Sect="Modules"/>. <P/>

<ManSection>
<Func Name="dimensions" Arg="process, options"/>
<Description>
Returns a dimensions record <C>rec(w, h)</C> where the dimensions are positive integers or <C>fail</C>. <P/>
If the values are integers, they specify the smallest dimensions of a block that is capable to display the information about the current state of this process. <P/>
A value <C>fail</C> indicates that the dimension is unspecified and can be replaced by any arbitrary positive integer. <P/>
</Description>
</ManSection>

<ManSection>
<Func Name="generate" Arg="process, id, options"/>
<Description>
Displays the information of this process in the block with identifier <A>id</A>
under the assumption that the block contains no characters and is large enough to display the information. <P/>
Therefore the printer usually needs to write characters for most of the interior of the block.
</Description>
</ManSection>

<ManSection>
<Func Name="update" Arg="process, id, options"/>
<Description>
Displays the information of this process in the block with identifier <A>id</A>
under the assumption that <C>generate</C> was called beforehand and the block bounds haven't changed since then. <P/>
Therefore the printer usually just updates a few characters in the terminal. <P/>
Returns <C>true</C> if it is capable to display the information in the block, otherwise <C>false</C>. <P/>
</Description>
</ManSection>

</Section>


<!--===========================================================================
||||  Implementation                                                       ||||
============================================================================-->


<Section Label="Implementation">
<Heading>Implementation</Heading>

The <E>progress printer</E>, as described in the introduction of this chapter,
is implemented as a record that eventually contains the following entries:

<List>

<Mark>Layout</Mark>
<Item>
A record <C>rec(Setup, DefaultOptions)</C> for setting up a layout.
</Item>

<Mark>RootProcess</Mark>
<Item>
The process tree containing the main process as the root.
</Item>

<Mark>Dimensions</Mark>
<Item>
A record <C>rec(w, h)</C> encoding the virtual bounds in the terminal.
</Item>

<Mark>Cursor</Mark>
<Item>
A record <C>rec(x, y)</C> encoding the cursor position.
</Item>

<Mark>TimeStamp</Mark>
<Item>
An internal time stamp that is changed whenever a process is refreshed.
</Item>

<Mark>Options</Mark>
<Item>
The current options record for <C>Layout.Setup</C>.
</Item>

<Mark>Pattern</Mark>
<Item>
The tree consisting of patterns.
</Item>

<Mark>InitialConfiguration</Mark>
<Item>
A configuration is a list containing entries describing linear equations.
These describe additional relations between the blocks created from the patterns of the layout. <P/>
An entry is of the form <C>[ factor, rec(id, param), ..., a ]</C>
which is interpreted as <C>factor * id.param + ... = a</C>.
Here, <C>factor</C> and <C>a</C> must be integers, <C>id</C> the identifier of a pattern in the layout
and <C>param</C> a parameter of a block, i.e. either <C>"x"</C>, <C>"y"</C>, <C>"w"</C> or <C>"h"</C>.
</Item>

<Mark>CurProcess</Mark>
<Item>
The process that is currently running.
</Item>

</List>

</Section>


<!--===========================================================================
||||  Process                                                              ||||
============================================================================-->


<Section Label="Process">
<Heading>Process</Heading>

See Section <Ref Sect="Terminology"/> for the basic terminology.
An abstract <E>process</E> is encoded via a <E>process record</E>,
but we usually omit the distinction between them.
The record has the following entries:

<List>

<Mark>id</Mark>
<Item>
Unique identifier string of the process.
</Item>

<Mark>parent</Mark>
<Item>
A process record or <C>fail</C>.
</Item>

<Mark>children</Mark>
<Item>
List of process records.
</Item>

<Mark>depth</Mark>
<Item>
The depth is a non-negative integer showing how far nested this process is in the root.
The root has <C>depth = 0</C>. Any other process has <C>depth = parent.depth + 1</C>.
</Item>

<Mark>totalTime</Mark>
<Item>
Total runtime of process up to the most recent refresh.
</Item>

<Mark>status</Mark>
<Item>
The main intent is to mark for the <C>RefreshProcess</C> command
how to update the total runtime of a process. <P/>

A <E>permanent</E> status is one that can last after a refresh: <P/>
<K>"active"</K>, <K>"inactive"</K>, <K>"complete"</K>.  <P/>

A <E>temporary</E> status is one that transforms immediately into a new one after a refresh: <P/>
<K>"started"</K>, <K>"stopped"</K>, <K>"terminated"</K>. <P/>

Below is a flow chart showcasing how each status can be transformed into one another,
given that <A>doRefresh</A> is true.
Therefore we only deal with the commands
<C>StartProcess</C>, <C>StopProcess</C> and <C>TerminateProcess</C>
for a permanent status.
We ommit the arrows for those commands that do not change the status.
<!-- https://asciiflow.com/ -->
<Verb><![CDATA[

           +----------+
+--------> |          |      Refresh
|          | inactive | <--------------+
+----------+          |                |
  Refresh  +----+-----+                |
                |                      |
                | Start                |
                |                      |
                v                      |
           +----------+                |
           |          |                |
           | started  |                |
           |          |                |
           +----+-----+                |
                |                      |
                | Refresh              |
                |                      |
                v                      |
           +----------+          +-----+----+
+--------> |          |  Stop    |          |
|          |  active  +--------> | stopped  |
+----------+          |          |          |
  Refresh  +----+-----+          +----------+
                |
                | Terminate
                |
                v
           +----------+
           |          |
           |terminated|
           |          |
           +----+-----+
                |
                | Refresh
                |
                v
           +----------+
+--------> |          |
|          | complete |
+----------+          |
  Refresh  +----------+

]]></Verb>

We mention one edge case for completeness. If a process is defined via an iterator that doesn't complete after <C>totalSteps</C>,
we change back from the <C>complete</C> status to the <C>active</C> status, and set <C>totalSteps := infinity</C> and <C>blocks := rec()</C>.
</Item>

<Mark>completedSteps</Mark>
<Item>
The number of completed steps of a process. It is initialized with -1. This indicates that the process hasn't started yet.
</Item>

<Mark>totalSteps</Mark>
<Item>
Number of comleted steps for a process to be marked as terminated.
</Item>

<Mark>content</Mark>
<Item>
Extra content of the process that may be used by the progress printer or printer modules.
</Item>

<Mark>blocks</Mark>
<Item>
A record containing entries <C>id := block</C>,
where <C>id</C> is a string corresponding to an id in the used pattern,
and a <C>block</C> is a record of the form <C>rec(x, y, w, h)</C>.
A printer block may be popullated with additional entries by the corresponding printer module.
</Item>

</List>

</Section>


<!--===========================================================================
||||  Example                                                              ||||
============================================================================-->


<Section Label="Progress Printer Example">
<Heading>Example</Heading>

TODO

</Section>


<!--===========================================================================
============================================================================-->


</Chapter>
